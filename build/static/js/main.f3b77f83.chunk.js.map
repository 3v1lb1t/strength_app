{"version":3,"sources":["components/ui/card.tsx","components/ui/button.tsx","components/ui/textarea.tsx","components/ui/input.tsx","App.js","index.js"],"names":["Card","_ref","className","props","React","Object","assign","CardHeader","_ref2","CardContent","_ref3","Button","ref","displayName","Textarea","Input","type","weeks","Array","from","length","_","i","days","LIFT_INPUTS","key","label","WAVE_SET_WEEK","WAVE_SETS","OLY_PERCENTAGES","getAccessoryWork","week","dayIdx","groups","icons","createElement","Dumbbell","ArrowBigRight","Brain","Flame","Hand","rng","Date","now","accessories","index","group","exercise","push","text","icon","StrengthApp","rms","setRms","useState","squat","bench","deadlift","clean","snatch","overhead","log","setLog","prompt","setPrompt","response","setResponse","loading","setLoading","weekIdx","setWeekIdx","setDayIdx","completedDays","setCompletedDays","setAccessories","currentWeek","currentDay","liftOrder","mainLift","mainRM","olympicLift","olympicRM","useEffect","formatWeight","percent","rm","Math","round","getPhaseColor","map","value","onChange","e","updateRM","lift","val","[object Object]","parseFloat","target","w","d","complete","includes","onClick","toUpperCase","p","join","Fragment","item","placeholder","nextDay","BadgeCheck","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"oIAEO,MAAMA,EAAOC,IAAA,IAACC,UAAEA,EAAY,MAAOC,GAAOF,EAAA,OAC/CG,gBAAA,MAAAC,OAAAC,OAAA,CAAKJ,gFAAiFA,KAAiBC,KAG5FI,EAAaC,IAAA,IAACN,UAAEA,EAAY,MAAOC,GAAOK,EAAA,OACrDJ,gBAAA,MAAAC,OAAAC,OAAA,CAAKJ,sEAAuEA,KAAiBC,KAGlFM,EAAcC,IAAA,IAACR,UAAEA,EAAY,MAAOC,GAAOO,EAAA,OACtDN,gBAAA,MAAAC,OAAAC,OAAA,CAAKJ,iBAAkBA,KAAiBC,KCP7BQ,EAASP,aACpB,CAAAH,EAA+BW,KAAG,IAAjCV,UAAEA,EAAY,MAAOC,GAAOF,EAAA,OAC3BG,gBAAA,SAAAC,OAAAC,OAAA,CACEM,IAAKA,EACLV,uKAAwKA,KACpKC,MAKVQ,EAAOE,YAAc,SCVd,MAAMC,EAAWV,aACtB,CAAAH,EAA+BW,KAAG,IAAjCV,UAAEA,EAAY,MAAOC,GAAOF,EAAA,OAC3BG,gBAAA,WAAAC,OAAAC,OAAA,CACEM,IAAKA,EACLV,8JAA+JA,KAC3JC,MAKVW,EAASD,YAAc,WCVhB,MAAME,EAAQX,aACnB,CAAAH,EAA8CW,KAAG,IAAhDV,UAAEA,EAAY,GAAEc,KAAEA,EAAO,UAAWb,GAAOF,EAAA,OAC1CG,gBAAA,QAAAC,OAAAC,OAAA,CACEM,IAAKA,EACLI,KAAMA,EACNd,+KAAgLA,KAC5KC,MAKVY,EAAMF,YAAc,iECLpB,MAAMI,EAAQC,MAAMC,KAAK,CAAEC,OAAQ,GAAK,CAACC,EAAGC,IAAMA,EAAI,GAChDC,EAAO,CAAC,QAAS,QAAS,SAE1BC,EAAc,CAClB,CAAEC,IAAK,QAASC,MAAO,kBACvB,CAAED,IAAK,QAASC,MAAO,0BACvB,CAAED,IAAK,WAAYC,MAAO,gBAC1B,CAAED,IAAK,QAASC,MAAO,mBACvB,CAAED,IAAK,SAAUC,MAAO,oBACxB,CAAED,IAAK,WAAYC,MAAO,uBAGtBC,EAAgB,EAChBC,EAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACjCC,EAAkB,CAAC,GAAK,IAAM,IAAM,IAAM,IAAM,GAAK,IAAM,KAE3DC,EAAmBA,CAACC,EAAMC,KAC9B,MAMMC,EAAS,CAND,CAAC,iBAAkB,kBAAmB,6BAA8B,qBAAsB,kCAC1F,CAAC,sBAAuB,gCAAiC,6BAA8B,mCAAoC,6BAC5H,CAAC,eAAgB,cAAe,4BAA6B,+BAAgC,0BAC3F,CAAC,oBAAqB,gBAAiB,2BAA4B,oBAAqB,sCACtF,CAAC,gCAAiC,eAAgB,mBAAoB,oBAAqB,0BAGtGC,EAAQ,CAAC9B,IAAA+B,cAACC,IAAQ,MAAKhC,IAAA+B,cAACE,IAAa,MAAKjC,IAAA+B,cAACG,IAAK,MAAKlC,IAAA+B,cAACI,IAAK,MAAKnC,IAAA+B,cAACK,IAAI,OAErEC,GADOC,KAAKC,MAAe,EAAPZ,EAAWC,GAClB,IACbY,EAAc,GAEpB,IAAK,IAAItB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMuB,GAASJ,EAAMnB,GAAKW,EAAOb,OAC3B0B,EAAQb,EAAOY,GACfE,EAAWD,GAAOL,EAAMV,EAAW,EAAJT,GAASwB,EAAM1B,QACpDwB,EAAYI,KAAK,CAAEC,KAAMF,EAAUG,KAAMhB,EAAMW,KAEjD,OAAOD,GAGM,SAASO,IACtB,MAAOC,EAAKC,GAAUC,mBAAS,CAAEC,MAAO,IAAKC,MAAO,IAAKC,SAAU,IAAKC,MAAO,IAAKC,OAAQ,IAAKC,SAAU,OACpGC,EAAKC,GAAUR,mBAAS,KACxBS,EAAQC,GAAaV,mBAAS,KAC9BW,EAAUC,GAAeZ,mBAAS,KAClCa,EAASC,GAAcd,oBAAS,IAChCe,EAASC,GAAchB,mBAAS,IAChCtB,EAAQuC,GAAajB,mBAAS,IAC9BkB,EAAeC,GAAoBnB,mBAAS,KAC5CV,EAAa8B,GAAkBpB,mBAAS,IAEzCqB,EAAc1D,EAAMoD,GACpBO,EAAarD,EAAKS,GAClB6C,EAAY,CAAC,QAAS,QAAS,WAAY,YAC3CC,EAAWD,GAAWF,EAAc3C,GAAU6C,EAAUzD,QACxD2D,EAAS3B,EAAI0B,GACbE,EAAyB,IAAXhD,EAAe,QAAqB,IAAXA,EAAe,SAAW,KACjEiD,EAAYD,EAAc5B,EAAI4B,GAAe,EAEnDE,oBAAU,KACRR,EAAe5C,EAAiB6C,EAAa3C,KAC5C,CAACqC,EAASrC,IAEb,MACMmD,EAAeA,CAACC,EAASC,IAAOC,KAAKC,MAAMH,EAAUC,GAarDG,EAAiBzD,GACjBA,EAAO,EAAU,cACjBA,EAAO,EAAU,gBACR,IAATA,EAAmB,gBACnBA,EAAO,EAAU,aACd,eAGT,OACE3B,IAAA+B,cAAA,OAAKjC,UAAU,oEACbE,IAAA+B,cAACnC,EAAI,KACHI,IAAA+B,cAAC5B,EAAU,CAACL,UAAU,qBAAoB,mBAC1CE,IAAA+B,cAAC1B,EAAW,CAACP,UAAU,cACpBsB,EAAYiE,IAAIxF,IAAA,IAACwB,IAAEA,EAAGC,MAAEA,GAAOzB,EAAA,OAC9BG,IAAA+B,cAAA,OAAKV,IAAKA,EAAKvB,UAAU,cACvBE,IAAA+B,cAAA,SAAOjC,UAAU,uBAAuBwB,GACxCtB,IAAA+B,cAACpB,EAAK,CACJC,KAAK,SACL0E,MAAOtC,EAAI3B,IAAQ,GACnBkE,SAAUC,GAjCPC,EAACC,EAAMC,IAAQ1C,EAAO,IAAKD,EAAK4C,CAACF,GAAOG,WAAWF,GAAO,KAiC9CF,CAASpE,EAAKmE,EAAEM,OAAOR,cAOhDtF,IAAA+B,cAAA,OAAKjC,UAAU,0BACZe,EAAMwE,IAAIU,GACT/F,IAAA+B,cAAA,OAAKV,IAAK0E,EAAGjG,UAAU,sBACrBE,IAAA+B,cAAA,OAAKjC,UAAU,sBAAqB,QAAMiG,GAC1C/F,IAAA+B,cAAA,OAAKjC,UAAU,uBACZqB,EAAKkE,IAAI,CAACW,EAAG9E,KACZ,MAAMG,KAAS0E,KAAKC,IACdC,EAAW7B,EAAc8B,SAAS7E,GACxC,OACErB,IAAA+B,cAAA,UACEV,IAAKA,EACLvB,iCAAkCsF,EAAcW,MAAME,EAAW,0BAA4B,KAC7FE,QAASA,KACPjC,EAAW6B,EAAI,GACf5B,EAAUjD,KAEZ8E,SAQdhG,IAAA+B,cAACnC,EAAI,KACHI,IAAA+B,cAAC5B,EAAU,CAACL,UAAU,yBAAwB,QAAMyE,EAAY,WAAIC,GACpExE,IAAA+B,cAAC1B,EAAW,CAACP,UAAU,aACrBE,IAAA+B,cAAA,SAAG/B,IAAA+B,cAAA,cAAQ,cAAmB,IAAE2C,EAAS0B,eACxC7B,IAAgBhD,EACfvB,IAAA+B,cAAA,SAAG/B,IAAA+B,cAAA,cAAQ,qBAA0B,IACnCP,EAAU6D,IAAIgB,MAAQA,OAAOtB,EAAasB,EAAI,IAAK1B,UAAe2B,KAAK,QAGzEtG,IAAA+B,cAAA/B,IAAAuG,SAAA,KACEvG,IAAA+B,cAAA,SAAG/B,IAAA+B,cAAA,cAAQ,YAAiB,IAAEgD,EAAa,IAAqB,KAAdR,EAAqBI,GAAQ,QAC/E3E,IAAA+B,cAAA,SAAG/B,IAAA+B,cAAA,cAAQ,gBAAqB,IAAEgD,EAAa,GAAoB,IAAdR,EAAoBI,GAAQ,SAGpFC,GACC5E,IAAA+B,cAAA,SAAG/B,IAAA+B,cAAA,cAAS6C,EAAYwB,cAAc,KAAU,IAAErB,EAAatD,EAAgB8C,EAAc,GAAIM,GAAW,QAG9G7E,IAAA+B,cAAA,KAAGjC,UAAU,sBAAqB,kBAClCE,IAAA+B,cAAA,MAAIjC,UAAU,iCACX0C,EAAY6C,IAAI,CAACmB,EAAMtF,IACtBlB,IAAA+B,cAAA,MAAIV,IAAKH,EAAGpB,UAAU,2BAA2B0G,EAAK1D,KAAK9C,IAAA+B,cAAA,YAAOyE,EAAK3D,SAI3E7C,IAAA+B,cAACrB,EAAQ,CACP+F,YAAY,+BACZnB,MAAO7B,KAAOc,KAAeC,MAAiB,GAC9Ce,SAAUC,GAAK9B,EAAO,IAAKD,EAAKmC,IAAIrB,KAAeC,KAAegB,EAAEM,OAAOR,UAG7EtF,IAAA+B,cAACxB,EAAM,CAAC4F,QA5FAO,KACd,MAAMrF,KAASkD,KAAeC,IAC9BH,EAAiB,IAAID,EAAe/C,IAChCO,EAAS,EACXuC,EAAUvC,EAAS,GACVqC,EAAU,IACnBC,EAAWD,EAAU,GACrBE,EAAU,KAqFoBrE,UAAU,eAClCE,IAAA+B,cAAC4E,IAAU,CAAC7G,UAAU,iBAAiB,6BClKtC8G,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHhH,IAAA+B,cAAC/B,IAAMiH,WAAU,KACfjH,IAAA+B,cAACgB,EAAW","file":"static/js/main.f3b77f83.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\nexport const Card = ({ className = \"\", ...props }) => (\r\n  <div className={`rounded-lg border bg-gray-900 text-white border-gray-700 shadow-sm ${className}`} {...props} />\r\n);\r\n\r\nexport const CardHeader = ({ className = \"\", ...props }) => (\r\n  <div className={`px-6 py-4 border-b border-gray-700 text-lg font-semibold ${className}`} {...props} />\r\n);\r\n\r\nexport const CardContent = ({ className = \"\", ...props }) => (\r\n  <div className={`p-6 ${className}`} {...props} />\r\n);\r\n","import * as React from \"react\";\r\n\r\ntype ButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement>;\r\n\r\nexport const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className = \"\", ...props }, ref) => (\r\n    <button\r\n      ref={ref}\r\n      className={`inline-flex items-center justify-center px-4 py-2 bg-gray-800 text-white rounded-md hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 ${className}`}\r\n      {...props}\r\n    />\r\n  )\r\n);\r\n\r\nButton.displayName = \"Button\";\r\n","import * as React from \"react\";\r\n\r\ntype TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>;\r\n\r\nexport const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\r\n  ({ className = \"\", ...props }, ref) => (\r\n    <textarea\r\n      ref={ref}\r\n      className={`rounded-md border border-gray-600 bg-black text-white px-3 py-2 text-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 ${className}`}\r\n      {...props}\r\n    />\r\n  )\r\n);\r\n\r\nTextarea.displayName = \"Textarea\";","import * as React from \"react\";\r\n\r\ntype InputProps = React.InputHTMLAttributes<HTMLInputElement>;\r\n\r\nexport const Input = React.forwardRef<HTMLInputElement, InputProps>(\r\n  ({ className = \"\", type = \"text\", ...props }, ref) => (\r\n    <input\r\n      ref={ref}\r\n      type={type}\r\n      className={`flex h-10 w-full rounded-md border border-gray-600 bg-black text-white px-3 py-2 text-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 ${className}`}\r\n      {...props}\r\n    />\r\n  )\r\n);\r\n\r\nInput.displayName = \"Input\";","// Strength Program App (Restored UI + Calendar + Dark Theme)\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardHeader, CardContent } from \"./components/ui/card.tsx\";\nimport { Button } from \"./components/ui/button.tsx\";\nimport { Textarea } from \"./components/ui/textarea.tsx\";\nimport { Input } from \"./components/ui/input.tsx\";\nimport { BadgeCheck, Dumbbell, ArrowBigRight, Brain, Flame, Hand } from 'lucide-react';\nimport './index.css';\n//import { motion } from 'framer-motion';\n\nconst weeks = Array.from({ length: 8 }, (_, i) => i + 1);\nconst days = [\"Day 1\", \"Day 2\", \"Day 3\"];\n\nconst LIFT_INPUTS = [\n  { key: 'squat', label: 'Back Squat 1RM' },\n  { key: 'bench', label: 'Paused Bench Press 1RM' },\n  { key: 'deadlift', label: 'Deadlift 1RM' },\n  { key: 'clean', label: 'Power Clean 1RM' },\n  { key: 'snatch', label: 'Power Snatch 1RM' },\n  { key: 'overhead', label: 'Overhead Press 1RM' }\n];\n\nconst WAVE_SET_WEEK = 5;\nconst WAVE_SETS = [75, 77, 84, 87, 80, 75];\nconst OLY_PERCENTAGES = [0.7, 0.72, 0.74, 0.76, 0.78, 0.8, 0.82, 0.85];\n\nconst getAccessoryWork = (week, dayIdx) => {\n  const upper = [\"Push-ups: 3x20\", \"Chin-ups: 3xMax\", \"Dumbbell Bench Press: 3x12\", \"Arnold Press: 3x10\", \"Bent-over Rows (Barbell): 3x10\"];\n  const lower = [\"Goblet Squats: 3x15\", \"Walking Lunges: 3x12 each leg\", \"Bulgarian Split Squat: 3x8\", \"Dumbbell Step-ups: 3x10 each leg\", \"Barbell Hip Thrusts: 3x12\"];\n  const core = [\"Plank: 3x30s\", \"V-ups: 3x15\", \"Hanging Knee Raises: 3x12\", \"Russian Twists (plate): 3x20\", \"Barbell Rollouts: 3x10\"];\n  const cardio = [\"Jump Rope: 3x1min\", \"Burpees: 3x10\", \"Mountain Climbers: 3x30s\", \"Jump Squats: 3x12\", \"Farmer's Carry (Dumbbells): 3x40ft\"];\n  const overhead = [\"Overhead Press (Barbell): 3x8\", \"Z Press: 3x8\", \"Push Press: 3x10\", \"Plate Raise: 3x12\", \"Handstand Hold: 3x30s\"];\n\n  const groups = [upper, lower, core, cardio, overhead];\n  const icons = [<Dumbbell />, <ArrowBigRight />, <Brain />, <Flame />, <Hand />];\n  const seed = Date.now() + week * 3 + dayIdx;\n  const rng = seed % 100;\n  const accessories = [];\n\n  for (let i = 0; i < 2; i++) {\n    const index = (rng + i) % groups.length;\n    const group = groups[index];\n    const exercise = group[(rng + week + i * 2) % group.length];\n    accessories.push({ text: exercise, icon: icons[index] });\n  }\n  return accessories;\n};\n\nexport default function StrengthApp() {\n  const [rms, setRms] = useState({ squat: 315, bench: 225, deadlift: 365, clean: 185, snatch: 135, overhead: 135 });\n  const [log, setLog] = useState({});\n  const [prompt, setPrompt] = useState(\"\");\n  const [response, setResponse] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [weekIdx, setWeekIdx] = useState(0);\n  const [dayIdx, setDayIdx] = useState(0);\n  const [completedDays, setCompletedDays] = useState([]);\n  const [accessories, setAccessories] = useState([]);\n\n  const currentWeek = weeks[weekIdx];\n  const currentDay = days[dayIdx];\n  const liftOrder = [\"squat\", \"bench\", \"deadlift\", \"overhead\"];\n  const mainLift = liftOrder[(currentWeek + dayIdx) % liftOrder.length];\n  const mainRM = rms[mainLift];\n  const olympicLift = dayIdx === 0 ? \"clean\" : dayIdx === 1 ? \"snatch\" : null;\n  const olympicRM = olympicLift ? rms[olympicLift] : 0;\n\n  useEffect(() => {\n    setAccessories(getAccessoryWork(currentWeek, dayIdx));\n  }, [weekIdx, dayIdx]);\n\n  const updateRM = (lift, val) => setRms({ ...rms, [lift]: parseFloat(val || 0) });\n  const formatWeight = (percent, rm) => Math.round(percent * rm);\n\n  const nextDay = () => {\n    const key = `${currentWeek}-${currentDay}`;\n    setCompletedDays([...completedDays, key]);\n    if (dayIdx < 2) {\n      setDayIdx(dayIdx + 1);\n    } else if (weekIdx < 7) {\n      setWeekIdx(weekIdx + 1);\n      setDayIdx(0);\n    }\n  };\n\n  const getPhaseColor = (week) => {\n    if (week < 3) return 'bg-blue-900';\n    if (week < 5) return 'bg-yellow-700';\n    if (week === 5) return 'bg-orange-700';\n    if (week < 8) return 'bg-red-700';\n    return 'bg-green-700';\n  };\n\n  return (\n    <div className=\"p-4 max-w-3xl mx-auto space-y-6 bg-black text-white min-h-screen\">\n      <Card>\n        <CardHeader className=\"text-xl font-bold\">Enter Your 1RMs</CardHeader>\n        <CardContent className=\"grid gap-3\">\n          {LIFT_INPUTS.map(({ key, label }) => (\n            <div key={key} className=\"grid gap-1\">\n              <label className=\"text-sm font-medium\">{label}</label>\n              <Input\n                type=\"number\"\n                value={rms[key] || ''}\n                onChange={e => updateRM(key, e.target.value)}\n              />\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-3 gap-2\">\n        {weeks.map(w => (\n          <div key={w} className=\"border rounded p-2\">\n            <div className=\"font-semibold mb-1\">Week {w}</div>\n            <div className=\"flex flex-col gap-1\">\n              {days.map((d, i) => {\n                const key = `${w}-${d}`;\n                const complete = completedDays.includes(key);\n                return (\n                  <button\n                    key={key}\n                    className={`text-sm p-1 rounded ${getPhaseColor(w)} ${complete ? 'border border-green-500' : ''}`}\n                    onClick={() => {\n                      setWeekIdx(w - 1);\n                      setDayIdx(i);\n                    }}\n                  >{d}</button>\n                );\n              })}\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <Card>\n        <CardHeader className=\"text-xl font-semibold\">Week {currentWeek} – {currentDay}</CardHeader>\n        <CardContent className=\"space-y-2\">\n          <p><strong>Main Lift:</strong> {mainLift.toUpperCase()}</p>\n          {currentWeek === WAVE_SET_WEEK ? (\n            <p><strong>Wave Set Weights:</strong> {\n              WAVE_SETS.map(p => `${p}%: ${formatWeight(p / 100, mainRM)} lbs`).join(\" | \")\n            }</p>\n          ) : (\n            <>\n              <p><strong>Top Set:</strong> {formatWeight(0.75 + currentWeek * 0.015, mainRM)} lbs</p>\n              <p><strong>Backoff Set:</strong> {formatWeight(0.7 + currentWeek * 0.01, mainRM)} lbs</p>\n            </>\n          )}\n          {olympicLift && (\n            <p><strong>{olympicLift.toUpperCase()}:</strong> {formatWeight(OLY_PERCENTAGES[currentWeek - 1], olympicRM)} lbs</p>\n          )}\n\n          <p className=\"font-semibold mt-4\">Accessory Work</p>\n          <ul className=\"list-disc list-inside text-sm\">\n            {accessories.map((item, i) => (\n              <li key={i} className=\"flex items-center gap-2\">{item.icon}<span>{item.text}</span></li>\n            ))}\n          </ul>\n\n          <Textarea\n            placeholder=\"Notes / RPE / Reps Completed\"\n            value={log[`${currentWeek}-${currentDay}`] || ''}\n            onChange={e => setLog({ ...log, [`${currentWeek}-${currentDay}`]: e.target.value })}\n          />\n\n          <Button onClick={nextDay} className=\"mt-2 w-full\">\n            <BadgeCheck className=\"mr-2 h-4 w-4\" /> Mark Day as Completed\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport StrengthApp from './App';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <StrengthApp />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}